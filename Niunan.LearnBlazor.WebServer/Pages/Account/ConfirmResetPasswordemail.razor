@page "/confirm-ResetPasswordemail"
@using AntDesign;
@using AutoMapper
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using LearnBlazorDto.Models.Account
@using System.Security.Claims;
@using IdentityServer.Model;
@using EmailServer.Model;
@inject NavigationManager _navigation
@inject SignInManager<IdentityServer.Model.UserEntity> _signInManager
@inject UserManager<IdentityServer.Model.UserEntity> _userManager
@inject Utility.FilesService _fileService;
@inject IMessageService _message

<div class="reset-password-container">
    <PageHeader Title="Reset Password" Subtitle="重置密码" />
    <div class="reset-password-form">
        <Form Model="@resetPassworDmodel" OnFinish="@ConfirmReset_EmailAsync" Layout="FormLayout.Vertical">
            <FormItem Label="New Password" Required>
                <InputPassword @bind-Value="resetPassworDmodel.Password" Placeholder="输入新密码" />
            </FormItem>
            <FormItem Label="Confirm Password" Required>
                <InputPassword @bind-Value="resetPassworDmodel.ConfirmPassword" Placeholder="确认您的新密码" />
            </FormItem>
            <FormItem>
                <Button Type="primary" HtmlType="submit" Loading="@isSubmitting" Disabled="@isSubmitting">确认</Button>
            </FormItem>
        </Form>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <Alert Type="@AlertType.Error"Message="@errorMessage"ShowIcon="true" />
        }
    </div>
</div>

<style>
    .reset-password-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 50vh;
        background-color: #f0f2f5;
    }

    .reset-password-form {
        background: #fff;
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 400px;
        box-sizing: border-box;
    }

    .ant-page-header {
        margin-bottom: 24px;
    }
</style>
@code {

    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; }


    [Parameter]
    [SupplyParameterFromQuery]
    public string Email { get; set; }

    private ResetPasswordModel resetPassworDmodel = new ResetPasswordModel();
    private string errorMessage;
    private bool isSubmitting = false;

    private async Task ConfirmReset_EmailAsync()
    {
        if (resetPassworDmodel.Password != resetPassworDmodel.ConfirmPassword)
        {
            errorMessage = "密码不一致，请重新输入。";
            return;
        }
        isSubmitting = true;
        errorMessage = null;

        var user = await _userManager.FindByEmailAsync(Email);
        if (user == null)
        {
            errorMessage = "没有发现该邮件的用户，请重新前往忘记密码，或者前往注册。";
            isSubmitting = false;
            return;
        }

        var result = await _userManager.ResetPasswordAsync(user, Token, resetPassworDmodel.Password);
        if (result.Succeeded)
        {
            await _message.Success("重置密码成功。您现在可以用新密码登录了,请前往登录。", 3);
            _navigation.NavigateTo("/");
        }
        else
        {
            //errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
            errorMessage = "邮箱出错或者已超时,请重新发送邮箱。";
            await _message.Error(errorMessage, 3);
        }
        isSubmitting = false;
    }
}
