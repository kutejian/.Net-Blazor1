@page "/forgot-password"
@using AntDesign;
@using Microsoft.AspNetCore.Identity;
@using LearnBlazorDto.Models.Account;
@using EmailServer.Model;
@inject NavigationManager _navigation
@inject UserManager<IdentityServer.Model.UserEntity> _userManager
@inject IMessageService _message
@inject EmailServer.Server.IEmailSender _emailSender;

<Form Model="@ForgotPasswordModel" OnFinish="HandleForgotPasswordSubmit">
    <FormItem>
        <Input @bind-Value="ForgotPasswordModel.Email" Placeholder="请输入注册邮箱" />
    </FormItem>
    <FormItem>
        <Button Type="primary" HtmlType="submit" Loading="@isSubmitting" Disabled="@isSubmitting">提 交</Button>
    </FormItem>
</Form>

@if (!string.IsNullOrEmpty(ForgotPasswordError))
{
    <p class="text-danger">@ForgotPasswordError</p>
}

@code {
    [Parameter]
    public EventCallback OnForgotPasswordSuccess { get; set; }

    public ForgotPasswordModel ForgotPasswordModel { get; set; } = new ForgotPasswordModel();
    public string ForgotPasswordError { get; set; }
    private bool isSubmitting = false;

    private async Task HandleForgotPasswordSubmit()
    {
        isSubmitting = true;
        StateHasChanged(); // 立即更新界面，显示加载状态

        var user = await _userManager.FindByEmailAsync(ForgotPasswordModel.Email);

        if (user != null)
        {
            if (!await _userManager.IsEmailConfirmedAsync(user))
            {
                ForgotPasswordError = "未找到该邮箱的用户，请检查邮箱是否正确,或未注册";
                await _message.Error("未找到该邮箱的用户，请检查邮箱是否正确,或未注册", 3);
            }
            else
            {
                var token = await _userManager.GeneratePasswordResetTokenAsync(user);
                var callbackUrl = _navigation.ToAbsoluteUri($"/confirm-ResetPasswordemail?token={Uri.EscapeDataString(token)}&email={Uri.EscapeDataString(user.Email)}");

                var message = new EmailMessage($"{user.FirstName}{user.LastName}", user.Email, "重置密码",
                    $"Please reset your password by clicking the following link: <a href='{callbackUrl}'>Reset Password</a>");

                 _emailSender.SendEmailAsync(message);
                await _message.Success("重置密码邮件已发送", 3);
            }
        }
        else
        {
            ForgotPasswordError = "未找到该邮箱的用户，请检查邮箱是否正确,或未注册";
            await _message.Error("未找到该邮箱的用户，请检查邮箱是否正确,或未注册", 3);
        }

        isSubmitting = false;
    }
}
